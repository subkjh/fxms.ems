<?xml version="1.0" encoding="UTF-8" ?>
<queries>

	<resultMap id="RESULT_MAP" javaClass="java.util.HashMap" />

	<!-- -->
	<!-- 현재까지 소비한 양을 이용하여 계약전력을 추출한다. -->
	<!-- 파워플래너와 연동되어 데이터가 들어오면 아래 쿼리는 사용하지 않는다. -->
	<!-- -->
	<insert id="make-epower-max">
		<![CDATA[
		insert into FX_CF_INLO_ATTR (
			INLO_NO
			, ATTR_NAME
			, ATTR_VALUE
			, ATTR_TYPE_CD
			, REG_USER_NO
			, REG_DTM
			, CHG_USER_NO
			, CHG_DTM
		)		
		with datas as ( 
			select 	INLO_NO
					, ENG_ID
					, truncate((max(INST_VAL) * 1.2) / 50, 0) * 50	as INST_VAL
			from 	VUP_ENG_CONS_RAW 
			where 	CONS_DTM  	>= 20230301000000
			and		ENG_ID	= 'EPWR' 
			and		INST_VAL < 500			
			group by INLO_NO
					, ENG_ID
		)
		select 	a.INLO_NO
				, 'CONTRACT_POWER'		as ATTR_NAME
				, a.INST_VAL			as ATTR_VALUE
				, 'NUMBER'				as ATTR_TYPE_CD
				, 0						as CHG_USER_NO
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')
										as CHG_DTM		 
				, 0						as REG_USER_NO
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')
										as REG_DTM		 
		from 	datas a
				, FX_CF_INLO b
		where 	a.INLO_NO = b.INLO_NO
		on duplicate key update
				ATTR_VALUE 	= a.INST_VAL	
				, CHG_DTM	= DATE_FORMAT(now(), '%Y%m%d%H%i%s')		 
		]]>
	</insert>

	<insert id="make-epower-max2">
		<![CDATA[
		insert into FX_CF_INLO_ATTR (
			INLO_NO
			, ATTR_NAME
			, ATTR_VALUE
			, ATTR_TYPE_CD
			, REG_USER_NO
			, REG_DTM
			, CHG_USER_NO
			, CHG_DTM
		)		
		with datas as ( 
			select 	INLO_NO
					, ENG_ID
					, truncate((max(INST_VAL) * 1.2) / 50, 0) * 50	as INST_VAL
			from 	VUP_ENG_CONS_RAW 
			where 	CONS_DTM  	>= 20230301000000
			and		ENG_ID	= 'EPWR'
			and		INST_VAL < 500 
			group by INLO_NO
					, ENG_ID
		)
		select 	a.INLO_NO
				, 'MAX_DEMAND_POWER'		as ATTR_NAME
				, a.INST_VAL * 0.25			as ATTR_VALUE
				, 'NUMBER'				as ATTR_TYPE_CD
				, 0						as CHG_USER_NO
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')
										as CHG_DTM		 
				, 0						as REG_USER_NO
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')
										as REG_DTM		 
		from 	datas a
				, FX_CF_INLO b
		where 	a.INLO_NO = b.INLO_NO
		on duplicate key update
				ATTR_VALUE 	= a.INST_VAL	
				, CHG_DTM	= DATE_FORMAT(now(), '%Y%m%d%H%i%s')		 
		]]>
	</insert>

	<select id="계측기의 배관, 설비 조회" resultMap="RESULT_MAP">
		<![CDATA[
		select	a.MO_TID
				, a.MO_NAME
				, b1.FAC_TID
				, b1.FAC_NAME
				, b2.PIPE_ID
				, b2.PIPE_NAME
		from	FX_MO 			a	
				, FE_MO_SENSOR	b
					left join FE_FAC_BAS 	b1 on b1.FAC_NO = b.FAC_NO
					left join FE_FAC_PIPE	b2 on b2.PIPE_ID = b.PIPE_ID
		where	a.MO_NO = b.MO_NO
		]]>
	</select>

	<select id="설비에 연결된 계측기 조회" resultMap="RESULT_MAP">
		<![CDATA[
		select	a.FAC_TID
				, a.FAC_NAME	
				, group_concat(concat(c.mo_tid, ':', c.mo_name)) as TIDS
		from	FE_FAC_BAS 		a
				, FE_MO_SENSOR	b
				, FX_MO 		c	
		where	a.FAC_NO 	= b.FAC_NO
		and		b.MO_NO		= c.MO_NO
		group by
				a.FAC_TID
				, a.FAC_NAME				
		]]>
	</select>

	<select id="배관에 연결된 계측기 조회" resultMap="RESULT_MAP">
		<![CDATA[
		select	a.PIPE_ID
				, a.PIPE_NAME	
				, group_concat(concat(c.mo_tid, ':', c.mo_name)) as TIDS
		from	FE_FAC_PIPE		a
				, FE_MO_SENSOR	b
				, FX_MO 		c	
		where	a.PIPE_ID 	= b.PIPE_ID
		and		b.MO_NO		= c.MO_NO
		group by
				a.PIPE_ID
				, a.PIPE_NAME				
		]]>
	</select>

	<select id="MO_NEW_TID조회" resultMap="RESULT_MAP">
		<![CDATA[
		select	a.MO_NAME
				, a.MO_TID
				, b.INLO_TID
				, concat(b.INLO_TID, '-', replace(a.MO_TID, '-', '')) as NEW_MO_TID				
		from	FX_MO			a
				, FX_CF_INLO 	b
		where	a.INLO_NO	= b.INLO_NO
		and		a.DEL_YN 	= 'N'
		and		a.MO_TID 	is not null
		order by 
				a.INLO_NO
		]]>
	</select>
	<update id="MO_TID변경">
		<![CDATA[
		update 	FX_MO a, FX_CF_INLO b
		set		MO_ADD_INFO = concat(b.INLO_TID, '-', replace(a.MO_TID, '-', ''))
		where 	a.INLO_NO	= b.INLO_NO
		and		a.DEL_YN 	= 'N'
		and		a.MO_TID 	is not null
		]]>
	</update>

	<update id="이전데이터삭제">
		<![CDATA[
		update	FX_MO
		set		DEL_YN = 'Y'
		where	CHG_USER_NO = 100 
		and 	MO_CLASS  	= 'SENSOR' 
		and 	MO_TID is not null
		]]>
	</update>
	
	<update id="에너지단가넣기">
		<![CDATA[
		insert into FE_ENG_PRICE (  
				  INLO_NO
				, ENG_ID
				, PRICE_TYPE
				, RANGE_STRT_VAL
				, RANGE_FNSH_VAL
				, ENG_PRICE
				, REG_USER_NO
				, REG_DTM 
				, CHG_USER_NO
				, CHG_DTM 
		)		
		select 	distinct 
				INLO_NO
				, ENG_ID
				, 'TEST'
				, 0
				, 9999999999
				, 1000
				, 0
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')	 
				, 0
				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')	  
		from 	FE_ENG_CONS_STAT 
		group by 
				eng_id
				, inlo_no		
		ON DUPLICATE KEY UPDATE
				CHG_DTM	= DATE_FORMAT(now(), '%Y%m%d%H%i%s')	 

		]]>
	</update>

	<update id="공장별SOURCE/SINK구분넣기">
		<![CDATA[		
		insert into VUP_CF_INLO_TYPE ( 
 				INLO_NO
				, ENG_ID
				, SOURCE_YN 
				, SINK_YN   
				, REG_USER_NO
				, REG_DTM    
				, CHG_USER_NO
				, CHG_DTM  
		)		
		with datas as ( 
			select	c.INLO_NO
					, a.ENG_ID
					, group_concat(a.PIPE_CL_CD)				as CL_CDS
			from	FE_FAC_PIPE 		a
					, FE_FAC_PIPE_PATH 	b
					, FX_MO 			c
			where	a.PIPE_ID 			= b.PIPE_ID
			and 	b.LINK_OBJ_CL_CD 	= 'MO'
			and 	c.MO_TID 			= b.LINK_OBJ_ID
			group by 
					c.INLO_NO
					, a.ENG_ID
		)
 		select 	a.INLO_NO
 				, b.ENG_ID
 				, if(instr(c.CL_CDS, 'SOURCE') > 0 , 'Y', if(instr(c.CL_CDS, 'PUBLIC') > 0 , 'Y', 'N')	)	 as SOURCE_YN
 				, if(instr(c.CL_CDS, 'SINK') > 0 , 'Y', 'N')	 as SINK_YN
 				, 0
 				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')
 				, 0
 				, DATE_FORMAT(now(), '%Y%m%d%H%i%s')   
 		from 	FX_CF_INLO a
 				, FE_ENG_BAS b
 				, datas c
 		where 	a.INLO_CL_CD = 'PLANT' 
		and 	a.DEL_YN  	= 'N'
		and 	b.USE_YN  	= 'Y'
		and		c.INLO_NO 	= a.INLO_NO
		and		c.ENG_ID	= b.ENG_ID
		]]>
	</update>
	
	
</queries>

